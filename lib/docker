#!/bin/bash



# ------------
# Get docker status
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------ 
getDockerStatus ()
{
    local containerName="$1"

    # get status (created, restarting, running, paused, exited, dead)
    local statusContainer=$(docker inspect -f '{{ .State.Status }}' "$containerName" 2>/dev/null)

    if [ "$statusContainer" == "" ]; then
        statusContainer="nonexistent"
    fi

    echo "$statusContainer"
}



# ------------
# Get docker id
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------ 
getDockerId ()
{
    local containerName="$1"

    local id=$(docker inspect -f '{{ .ID }}' "$containerName" 2>/dev/null)

    if [ "$id" == "" ]; then
        id="none"
    else
        id="${id:0:12}"
    fi

    echo "$id"
}



# ------------
# Get docker name
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------ 
getDockerName ()
{
    local containerName="$1"

    local name=$(docker inspect -f '{{ .Name }}' "$containerName" 2>/dev/null)

    if [ "$name" == "" ]; then
        name="none"
    fi

    echo "${name/\//}"
}



# ------------
# Get docker ip
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------ 
getDockerIp ()
{
    local containerName="$1"

    local ip=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' "$containerName" 2>/dev/null)

    if [ "$ip" == "" ]; then
        ip="0.0.0.0"
    fi

    echo $ip
}



# ------------
# Get docker created at
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------ 
getDockerCreatedAt ()
{
    local containerName="$1"
    local format="${2:-%d %B of %Y at %H:%M and %S seconds}"

    local createdAt=$(docker inspect -f '{{ .Created }}' "$containerName" 2>/dev/null)

    if [ "$createdAt" == "" ]; then
        createdAt="none"
    else
        createdAt=$(date --date="$createdAt" "+$format")
    fi

    echo $createdAt
}



# ------------
# Get docker started at
#      
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------ 
getDockerStartedAt ()
{
    local containerName="$1"
    local format="${2:-%d %B of %Y at %H:%M and %S seconds}"

    local startedAt=$(docker inspect -f '{{ .State.StartedAt }}' "$containerName" 2>/dev/null)

    if [ "$startedAt" == "" ]; then
        startedAt="none"
    else
        startedAt=$(date --date="$startedAt" "+$format")
    fi

    echo $startedAt
}



# ------------
# Get docker start script
#      
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------ 
getDockerStartScript ()
{
    local containerName="$1"

    local startScript=$(docker inspect -f '{{ .Path }}' "$containerName" 2>/dev/null)

    if [ "$startScript" == "" ]; then
        startScript="none"
    fi

    echo $startScript
}



# ------------
# Get docker ports
#
# returns:
# --------
# [hostPort1] [dockerPort1]\n
# [hostPort2] [dockerPort2]\n
# [hostPort3] [dockerPort3]
#
# usage:
# ------
# local ports=$(getDockerPorts "$containerName")
# while read -r port; do
#     local port=($port)
#     echo "host-port: ${port[0]} container-port: ${port[1]}"
# done <<< "$ports"
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------ 
getDockerPorts ()
{
    local ports=$(docker inspect -f '{{range $p, $conf := .HostConfig.PortBindings}}{{(index $conf 0).HostPort}} {{$p}}'$'\n''{{end}}' "$containerName" 2>/dev/null)

    echo -en "$ports"
}



# ------------
# Get docker volume mounts
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-02-05
# ------------
getDockerVolumes ()
{
    local volumes=$(docker inspect -f '{{range .HostConfig.Binds}}{{.}}'$'\n''{{end}}' "$containerName" 2>/dev/null)

    echo -en "${volumes//:/ }"
}



# ------------
# Check if docker image exists
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-01-26
# ------------
dockerImageExists ()
{
    local imageName="$1"

    if [[ "$(docker images -q "$imageName" 2> /dev/null)" != "" ]]; then
        return 0
    fi

    return 1
}



# ------------
# Check if docker container is running
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-01-22
# ------------
dockerContainerIsRunning()
{
  if [[ "$(docker inspect -f {{.State.Running}} $1 2> /dev/null)" == "true" ]]; then
    return 0
  else
    return 1
  fi
}



# ------------
# Check if docker container exists (regardless whether it is running or not)
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-01-22
# ------------
dockerContainerExists()
{
  if [[ "$(docker inspect -f {{.State.Running}} $1 2> /dev/null)" == "" ]]; then
    return 1
  else
    return 0
  fi
}



# ------------
# Creates a new docker container
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-01-26
# ------------
createContainer ()
{
    local containerName="$1"

    # some vars
    local          imageFile="$containerPath/image"
    local        linksFolder="$containerPath/links"
    local        portsFolder="$containerPath/ports"
    local      volumesFolder="$containerPath/volumes"
    local environmentsFolder="$containerPath/environments"
    local   parametersFolder="$containerPath/parameters"

    # check image link
    if [ ! -h "$imageFile" ]; then
        log 'error' "The image link \"$imageFile\" was not found." && exit 1
    else
        local imageLinkTarget=$(readlink -f "$imageFile")

        if [ "$imageLinkTarget" != "" ]; then
            local imageName=$(basename "$imageLinkTarget")
        else
            local imageName=$(readlink "$imageFile")
        fi
    fi

    # check ports
    declare -a ports
    if [ -d "$portsFolder" ]; then
        for fileSource in $(find "$portsFolder" -type l); do
            local fileTarget=$(readlink -f "$fileSource")

            local containerPort=$(basename "$fileSource")
            local      hostPort=$(basename "$fileTarget")

            ports[$containerPort]=$hostPort
        done
    fi

    # check volumes
    declare -A volumes
    if [ -d "$volumesFolder" ]; then
        for fileSource in $(find "$volumesFolder" -type l); do
            local volumesFolderSed=$(echo "$volumesFolder" | sed 's/\//\\\//g')
            local         hostPath=$(echo "$fileSource" | sed "s/$volumesFolderSed//g")
            if [ -e "$fileSource" ]; then
                local containerPath=$(readlink -f "$fileSource")
            else
                local containerPath=$(readlink "$fileSource")
            fi

            volumes[$containerPath]="$hostPath"
        done
    fi

    # check links
    declare -a links
    if [ -d "$linksFolder" ]; then
        for fileSource in $(find "$linksFolder" -type l); do
            local          linkFile=$(readlink -f "$fileSource")
            local linkContainerName=$(basename "$linkFile")

            links+=("$linkContainerName")
        done
    fi

    # check environments
    declare -A environments
    if [ -d "$environmentsFolder" ]; then
        for fileSource in $(find "$environmentsFolder" -type l); do
            local environmentFile=$(readlink -f "$fileSource")
            local environmentValue=$(basename "$environmentFile")
            local environmentName=$(basename "$fileSource")

            environments[$environmentName]="$environmentValue"
        done
    fi

    # declare parameters and add name first
    declare -A parameters
    parameters[name]="$containerName"

    # check parameters
    if [ -d "$parametersFolder" ]; then
        for fileSource in $(find "$parametersFolder" -type l); do
            local parameterFile=$(readlink -f "$fileSource")
            local parameterValue=$(basename "$parameterFile")
            local parameterName=$(basename "$fileSource")

            parameters[$parameterName]="$parameterValue"
        done
    fi

    # build docker run command
    local command="docker run -dit"

    # add ports to command
    for containerPort in "${!ports[@]}"; do
        local hostPort=${ports[$containerPort]}

        command="$command -p $containerPort:$hostPort"
    done

    # add volume to command
    for containerPath in "${!volumes[@]}"; do
        local hostPath=${volumes[$containerPath]}

        command="$command -v $containerPath:$hostPath"
    done

    # add environments to command
    for environmentName in "${!environments[@]}"; do
        local environmentValue=${environments[$environmentName]}

        command="$command -e \"$environmentName=$environmentValue\"" #"
    done

    # add parameters to command
    for parameterName in "${!parameters[@]}"; do
        local parameterValue=${parameters[$parameterName]}

        if [ "${parameterValue:0:1}" != "=" ]; then
            parameterValue=" $parameterValue"
        fi

        command="$command --$parameterName$parameterValue"
    done

    # show links
    for linkContainerName in "${links[@]}"; do
        command="$command --link $linkContainerName:$linkContainerName"
    done

    # add image parameter
    command="$command $imageName"

    if $DEBUG; then
        echo "Command to execute:"
        echo "$command"
        exit
    else
        # eval command
        local resultCommand=$(eval "$command")
    fi
}



# ------------
# Start a new docker container
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-01-26
# ------------
startContainer ()
{
    local containerName="$1"
    local returnCommand=$(docker start "$containerName")
}



# ------------
# Unpause a new docker container
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-01-26
# ------------
unpauseContainer ()
{
    local containerName="$1"
    local returnCommand=$(docker unpause "$containerName")
}



# ------------
# Stop a new docker container
#
# @author  Björn Hempel
# @version 1.0
# @date    2017-01-26
# ------------
stopContainer ()
{
    local containerName="$1"
    local returnCommand=$(docker stop "$containerName")
}



